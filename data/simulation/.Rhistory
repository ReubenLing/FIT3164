rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
install.packages("pkgbuild")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
Sys.which("make")
Sys.which("make")
install.packages("jsonlite", type = "source")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
####################################################################################
#	Script-file:   studio7.code.R
#	Project:       FIT3154 - Studio 7
# Author:        Daniel Schmidt
#
# Purpose:  	   Code for questions in Studio 7
####################################################################################
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
setwd("~/GitHub/FIT3164/data/simulation")
data= read.csv("sample_output.csv")
View(data)
fit=lm(avg_daily_water_usage~.)
fit=lm(avg_daily_water_usage~. data=data)
data= read.csv("sample_output.csv")
fit=lm(avg_daily_water_usage~. data=data)
fit=lm(avg_daily_water_usage~.,data=data)
summary(fit)
fit=lm(avg_daily_water_usage~c(-irrigating.yes,-irrigation_percentage).,data=data)
fit=lm(avg_daily_water_usage~-irrigating.yes -irrigation_percentage.,data=data)
fit=lm(avg_daily_water_usage~-irrigating.yes -irrigation_percentage.,data=data)
df=data.frame(data)
df
fit=lm(avg_daily_water_usage~ -irrigating.yes -irrigation_percentage.,data=df)
fit=lm(avg_daily_water_usage~ .-irrigating.yes -irrigation_percentage,data=df)
fit=lm(avg_daily_water_usage~ .-irrigating.yes -irrigation_percentage,data=data)
fit=lm()
fit=lm(avg_daily_water_usage~ .-irrigating.yes -irrigation_percentage,data=data)
data=data[data$irrigating=="yes,"]
data_irrigating=data[data$irrigating=="yes,"]
data_irrigating=data[data$irrigating=="yes",]
fit_irr=lm(avg_daily_water_usage~.=data_irrigating)
fit_irr=lm(avg_daily_water_usage~.data=data_irrigating)
fit_irr=lm(avg_daily_water_usage~.,data=data_irrigating)
fit_irr=lm(avg_daily_water_usage~ .,data=data_irrigating)
data_irrigating=data[data$irrigating=="yes",]
fit_irr=lm(avg_daily_water_usage~ .,data=data_irrigating)
data_irrigating
data_irrigating=data[,data$irrigating=="yes"]
fit_irr=lm(avg_daily_water_usage~ .,data=data_irrigating)
data_irrigating
data_irrigating=data[data$irrigating?=="yes",]
fit_irr=lm(avg_daily_water_usage~ .,data=data_irrigating)
data= read.csv("sample_output.csv")
data_irrigating=data[data["irrigating?"]=="yes",]
data_irrigating
data_irrigating=data[data["irrigating?"]=="yes",]
data_irrigating
data_irrigating=data[data["irrigating?"]=="yes",]
data_irrigating=data[data["irrigating?",]=="yes",]
data_irrigating
data_irrigating=data[data["irrigating?",]="yes",]
data_irrigating=data[data["irrigating?",]=="yes",]
data_irrigating
data_irrigating=data[data[,"irrigating?"]=="yes",]
data_irrigating=data[data["irrigating?"]=="yes",]
data_irrigating
data_irrigating=data[data["irrigating.",]=="yes",]
data_irrigating
data_irrigating=data[data["irrigating."]=="yes",]
data_irrigating
fit_irr=lm(avg_daily_water_usage~ .,data=data_irrigating)
fit_irr=lm(avg_daily_water_usage~-location.,data=data_irrigating)
fit_irr=lm(avg_daily_water_usage~.-location,data=data_irrigating)
data_irrigating
View(data_irrigating)
types(data_irrigating)
type(data_irrigating)
data.type(data_irrigating)
typeof(data_irrigating)
fit_irr=lm(avg_daily_water_usage~.-location -farm_name -irrigating.,data=data_irrigating)
View(data_irrigating)
is.na(data)
str(data_irrigating)
data_irrigating=na.omit(data_irrigating)
str(data_irrigating)
fit_irr=lm(avg_daily_water_usage~.-location -farm_name -irrigating.,data=data_irrigating)
debug_contr_error2
data_irrigating=data.frame(data[data["irrigating."]=="yes",])
data_irrigating=na.omit(data_irrigating)
fit_irr=lm(avg_daily_water_usage~.-location -farm_name -irrigating.,data=data_irrigating)
fit_irr=lm(avg_daily_water_usage~.-location -farm_name as.factor(-irrigating.),data=data_irrigating)
fit_irr=lm(avg_daily_water_usage~.-location -farm_name as.factor(-irrigating.),data=data_irrigating)
data_irrigating=data.frame(data[data["irrigating."]=="yes",])
droplevels.factor(data_irrigating)
df=subset(data_irrigating, select = -c(location,farm_name,irrigating.) )
fit_irr=lm(avg_daily_water_usage~.,data=df)
summary(fit_irr)
fit_irr=lm(avg_daily_water_usage~-num_cows_other.,data=df)
summary(fit_irr)
fit_irr=lm(avg_daily_water_usage~.-num_cows_other,data=df)
summary(fit_irr)
data_irrigating=data.frame(data[data["irrigating."]=="no",])
droplevels.factor(data_irrigating)
data_irrigating=na.omit(data_irrigating)
df=subset(data_irrigating, select = -c(location,farm_name,irrigating.) )
fit_irr=lm(avg_daily_water_usage~.-num_cows_other,data=df)
summary(fit_irr)
fit_irr=lm(avg_daily_water_usage~ .,data=data_irrigating)
summary(fit_irr)
fit_irr=lm(avg_daily_water_usage~ .,data=df)
summary(fit_irr)
View(df)
data_irrigating=data.frame(data[data["irrigating."]=="no",])
#droplevels.factor(data_irrigating)
data_irrigating=na.omit(data_irrigating)
df=subset(data_irrigating, select = -c(location,farm_name,irrigating.) )
fit_irr=lm(avg_daily_water_usage~.-num_cows_other,data=df)
summary(fit_irr)
fit_irr=lm(avg_daily_water_usage~ .,data=df)
summary(fit_irr)
data_irrigating=data.frame(data[data["irrigating."]=="no",])
#droplevels.factor(data_irrigating)
#data_irrigating=na.omit(data_irrigating)
df=subset(data_irrigating, select = -c(location,farm_name,irrigating.) )
fit_irr=lm(avg_daily_water_usage~ .,data=df)
summary(fit_irr)
fit_irr=lm(avg_daily_water_usage~.-num_cows,data=df)
summary(fit_irr)
fit_irr=lm(avg_daily_water_usage~.-num_lactating,data=df)
summary(fit_irr)
fit_irr=lm(avg_daily_water_usage~.-num_cows_lactating,data=df)
summary(fit_irr)
fit_irr=lm(avg_daily_water_usage~.-num_cows,data=df)
summary(fit_irr)
fit_irr=lm(avg_daily_water_usage~.-num_cows,data=df)
summary(fit_irr)
nrows(df)
data= read.csv("sample_output.csv")
data_non_irrigating=data.frame(data[data["irrigating."]=="no",])
nrows(data)
nrow(data)
data_non_irrigating=data.frame(data[data["irrigating."]=="no",])
data_irrigating=data.frame(data[data["irrigating."]=="yes",])
#droplevels.factor(data_irrigating)
#data_irrigating=na.omit(data_irrigating)
df=subset(data_irrigating, select = -c(location,farm_name,irrigating.) )
df_1=subset(data_non_irrigating, select = -c(location,farm_name,irrigating.) )
fit_irr=lm(avg_daily_water_usage~.-num_cows,data=df1)
fit_irr=lm(avg_daily_water_usage~.-num_cows,data=df_1)
summary(fit_irr)
fit_irr=lm(avg_daily_water_usage~ .,data=df)
summary(fit_irr)
